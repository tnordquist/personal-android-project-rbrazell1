plugins {
    id 'com.android.application'
}
apply plugin: 'androidx.navigation.safeargs'

static def getProperty(String filename, String property) {
    Properties properties = new Properties()
    properties.load(new FileInputStream(filename))
    return properties.getProperty(property)
}

static def quoted(String value) {
    return "\"${value}\""
}

android {

    compileSdkVersion 31

    defaultConfig {
        applicationId "edu.cnm.deepdive.sipandscore"
        minSdkVersion 28
        targetSdkVersion 31
        versionCode 1
        versionName "1.0"

        javaCompileOptions {
            annotationProcessorOptions {
                arguments = [
                        'room.schemaLocation': "$projectDir/schemas".toString()
                ]
            }
        }

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"

// UPDATE PATH TO PROPERTIES FILES HERE
        def connection_properties = "$projectDir/../../../services/sip-and-score.properties"

        resValue "string", "maps_api_key", getProperty(connection_properties, "google_maps_api_key")
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }


    buildFeatures {
        viewBinding true
        dataBinding true
    }
}

dependencies {

    // .jar-based libraries included in project
    implementation fileTree(dir: "libs", include: ["*.jar"])

    // Basic Jetpack support
    implementation 'androidx.core:core:1.8.0'
    implementation 'androidx.media:media:1.6.0'
    implementation 'androidx.legacy:legacy-support-core-utils:1.0.0'
    implementation 'androidx.legacy:legacy-support-core-ui:1.0.0'
    implementation 'androidx.appcompat:appcompat:1.2.0'

    def camerax_version = "1.2.0-alpha02"
    // CameraX core library using camera2 implementation
    implementation "androidx.camera:camera-camera2:$camerax_version"
    // CameraX Lifecycle Library
    implementation "androidx.camera:camera-lifecycle:$camerax_version"
    // CameraX View class
    implementation "androidx.camera:camera-view:1.2.0-alpha02"

    // Basic Android components
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation "androidx.recyclerview:recyclerview:1.2.1"
    implementation "androidx.recyclerview:recyclerview-selection:1.1.0"
    implementation 'androidx.preference:preference:1.2.0'

    // Fragment & navigation dependencies
    implementation 'androidx.fragment:fragment:1.4.1'
    implementation "androidx.navigation:navigation-fragment:2.4.2"
    implementation "androidx.navigation:navigation-ui:2.4.2"
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Lifecycle (LiveData and ViewModel) dependencies
    def lifecycle_version = '2.4.1'
    implementation "androidx.lifecycle:lifecycle-livedata:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-viewmodel:$lifecycle_version"
    implementation "androidx.lifecycle:lifecycle-common-java8:$lifecycle_version"
    implementation 'androidx.lifecycle:lifecycle-viewmodel-ktx:2.4.1'

    // Material Design components
    implementation 'com.google.android.material:material:1.6.1'

    // Google Sign in dependencies
    implementation 'com.google.android.gms:play-services-auth:20.2.0'

    // ReactiveX dependencies
    implementation 'io.reactivex.rxjava3:rxjava:3.1.4'
    implementation 'io.reactivex.rxjava3:rxandroid:3.0.0'

    // Room components
    def roomVersion = '2.4.2'
    def roomVersion2 = '2.4.2'
    implementation "androidx.room:room-runtime:$roomVersion2"
    annotationProcessor "androidx.room:room-compiler:$roomVersion"
    implementation "androidx.room:room-rxjava2:$roomVersion2"

    // Gson (Google JSON parser) dependency
    implementation 'com.google.code.gson:gson:2.9.0'

    // Google Maps
    implementation 'com.google.android.gms:play-services-maps:18.0.2'
    implementation 'com.google.android.gms:play-services-location:19.0.1'

    // Retrofit (REST client) with ReactiveX & Gson integration
    def retrofit_version = '2.9.0'
    implementation "com.squareup.retrofit2:retrofit:$retrofit_version"
    implementation "com.squareup.retrofit2:converter-gson:$retrofit_version"
    implementation "com.squareup.retrofit2:adapter-rxjava2:$retrofit_version"

    //Picasso Library
    implementation 'com.squareup.picasso:picasso:2.71828'

    // OkHttp logging dependency
    implementation 'com.squareup.okhttp3:logging-interceptor:4.9.0'
    implementation 'androidx.legacy:legacy-support-v4:1.0.0'

    // Stetho (inspection) dependency
    implementation 'com.facebook.stetho:stetho:1.5.1'

    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test.ext:junit:1.1.2'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.3.0'

}

task generateApiDoc() {
    group "reporting"
    description "Generates all Javadoc"
}

android.applicationVariants.all { variant ->
    def task = project.tasks.create("generate${variant.name.capitalize()}Javadoc", Javadoc) {
        title "Roulette (${project.android.defaultConfig.versionName})"
        group "ApiDoc"
        description "Generates Javadoc for $variant.name."

        source = variant.sourceSets.collect { it.java.sourceFiles }.inject { m, i -> m + i }

        doFirst {
            classpath = project.files(
                    project.file(projectDir)
                            .toPath()
                            .resolve("build/intermediates/javac/${variant.name}/classes"),
                    variant.javaCompileProvider
                            .get()
                            .classpath
                            .files,
                    project.android.
                            getBootClasspath())
        }

        if (JavaVersion.current().isJava8Compatible()) {
            options.addStringOption('Xdoclint:none', '-quiet')
        }

        exclude '**/R'
        exclude '**/R.**'
        exclude '**/R\$**'
        exclude '**/BuildConfig*'

        destinationDir = file("$projectDir/../docs/api")

        options {
            windowTitle = "Sip & Score (${project.android.defaultConfig.versionName})"
            memberLevel = JavadocMemberLevel.PROTECTED
            linkSource = false
//        set linkSource to true to share with other team members
            author = true
            links 'https://docs.oracle.com/javase/8/docs/api/'
            links 'http://reactivex.io/RxJava/javadoc/'
            links 'https://www.javadoc.io/doc/com.google.code.gson/gson/latest/'
            linksOffline 'https://developer.android.com/reference', "$projectDir/.."
        }

        failOnError true
    }

    task.dependsOn "assemble${variant.name.capitalize()}"

}